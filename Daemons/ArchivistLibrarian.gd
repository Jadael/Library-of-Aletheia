# ArchivistLibrarian.gd
extends Node
class_name ArchivistLibrarian
const NAME = "🗄️ Archivist Librarian"
# Owner: Aletheia

## The ArchivistLibrarian Daemon: Guardian of Project Documentation
##
## This Daemon is responsible for managing the storage and retrieval of
## documentation files generated for the project. It works in tandem with
## other Daemons under the guidance of Aletheia, the Archon of Project Knowledge.
##
## Responsibilities:
## 1. Creating and maintaining the documentation output directory
## 2. Saving generated documentation to appropriate files
## 3. Retrieving existing documentation when requested
## 4. Ensuring the integrity and accessibility of all stored documentation
##
## The ArchivistLibrarian serves as the bridge between the ephemeral realm of
## generated knowledge and the tangible realm of persistent documentation files.

## The sacred path where documentation scrolls are stored
var docs_output_folder: String

## Prepares the ArchivistLibrarian for its duties
##
## This ritual establishes the sacred ground where documentation will be preserved.
##
## Parameters:
## - output_folder: The path where documentation files will be stored
func setup(output_folder: String) -> void:
	docs_output_folder = output_folder
	_create_output_directory()

## Creates the hallowed halls to house our documentation scrolls
##
## This mystical rite ensures that a suitable repository exists for our knowledge.
## If the halls do not yet exist, they are conjured into being.
func _create_output_directory() -> void:
	if not DirAccess.dir_exists_absolute(docs_output_folder):
		var dir = DirAccess.open("res://")
		if dir.make_dir_recursive(docs_output_folder.trim_prefix("res://")) != OK:
			push_error("ArchivistLibrarian: Failed to create the sacred halls of documentation.")
			Chronicler.log_event(self, "output_directory_creation_failed", {
				"path": docs_output_folder
			})

## Inscribes the given documentation onto a sacred scroll
##
## This function takes the ephemeral knowledge generated by the LoreWeaver
## and preserves it in a tangible form for future reference.
##
## Parameters:
## - script_path: The path of the original script being documented
## - doc_content: The documentation content to be preserved
func save_documentation(script_path: String, doc_content: String) -> void:
	var output_path = docs_output_folder.path_join(script_path.get_file().get_basename() + ".md")
	var file = FileAccess.open(output_path, FileAccess.WRITE)
	if file:
		file.store_string(doc_content)
		file.close()
		Chronicler.log_event(self, "documentation_scroll_created", {
			"script_name": script_path.get_file().get_basename(),
			"scroll_path": output_path
		})
	else:
		push_error("ArchivistLibrarian: Failed to inscribe the documentation scroll.")
		Chronicler.log_event(self, "documentation_scroll_creation_failed", {
			"script_name": script_path.get_file().get_basename(),
			"attempted_path": output_path
		})

## Retrieves the sacred knowledge from a documentation scroll
##
## This function seeks out and unrolls the scroll containing the requested wisdom,
## returning its contents to those who seek enlightenment.
##
## Parameters:
## - script_name: The name of the script whose documentation is sought
##
## Returns:
## - The content of the documentation scroll, or an error message if not found
func get_documentation(script_name: String) -> String:
	var scroll_path = docs_output_folder.path_join(script_name + ".md")
	if FileAccess.file_exists(scroll_path):
		var file = FileAccess.open(scroll_path, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			return content
		else:
			push_error("ArchivistLibrarian: Failed to unroll the documentation scroll.")
			return "Error: Could not read the sacred text for " + script_name
	else:
		return "Alas, no scroll of knowledge exists for " + script_name

# TODO: Implement a method to update existing documentation without losing manual edits
# TODO: Create a system for versioning documentation to track the evolution of knowledge
# TODO: Develop a search function to find specific information across all documentation scrolls
